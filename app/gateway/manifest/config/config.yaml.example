server:
  address: ":8888"
  name: "gateway"
  openapiPath: "/api.json"
  swaggerPath: "/swagger"
  # 日志扩展配置(参数日志组件配置)
  logger:
    prefix:                "gateway:"                    # 日志内容输出前缀。默认为空
    level:                 "all"                 # 日志输出级别
    timeFormat:            "2006-01-02T15:04:05" # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
    stdout:                true                  # 日志是否同时输出到终端。默认true
    stdoutColorDisabled:   true                 # 关闭终端的颜色打印。默认开启
database:
  default:
    host: "124.221.249.230"     # 地址
    port: "13306"               # 端口
    user: "root"                # 账号
    pass: "ZHYstc_00.888"       # 密码
    name: "bbk"                 # 数据库名称
    type: "mysql"               # 数据库类型(如：mariadb/tidb/mysql/pgsql/mssql/sqlite/oracle/clickhouse/dm)
    prefix: "bbk_"               # (可选)表名前缀
    charset: "utf8mb4"          # (可选)数据库编码(如: utf8mb4/utf8/gbk/gb2312)，一般设置为utf8mb4。默认为utf8。
    timezone: "Asia/Shanghai"           # (可选)时区配置，例如:Local
    maxIdle: 10                 # (可选)连接池最大闲置的连接数(默认10)
    maxOpen: 200                # (可选)连接池最大打开的连接数(默认无限制)
    queryTimeout: "1m"           # (可选)查询语句超时时长(默认无限制，同时受ctx超时时间影响)。值为time.Parse支持的格式，如30s, 1m。
    execTimeout: "1m"            # (可选)写入语句超时时长(默认无限制，同时受ctx超时时间影响)。值为time.Parse支持的格式，如30s, 1m。
    tranTimeout: "2m"            # (可选)事务处理超时时长(默认无限制，同时受ctx超时时间影响)。值为time.Parse支持的格式，如30s, 1m。
    prepareTimeout: "1m"         # (可选)预准备SQL语句执行超时时长(默认无限制，同时受ctx超时时间影响)。值为time.Parse支持的格式，如30s, 1m。
    createdAt: "created_at"     # (可选)自动创建时间字段名称
    updatedAt: "updated_at"     # (可选)自动更新时间字段名称
    deletedAt: "deleted_at"     # (可选)软删除时间字段名称
    debug:   true
  logger:
    path: "E:/www/bbk/log/"
    level: "all"
    stdout: true
logger:
  path:                  "E:/www/bbk/log/"           # 日志文件路径。默认为空，表示关闭，仅输出到终端
  file:                  "{Y-m-d}.log"         # 日志文件格式。默认为"{Y-m-d}.log"
  prefix:                "gateway:"                    # 日志内容输出前缀。默认为空
  level:                 "all"                 # 日志输出级别
  timeFormat:            "2006-01-02T15:04:05" # 自定义日志输出的时间格式，使用Golang标准的时间格式配置
  ctxKeys:               []                    # 自定义Context上下文变量名称，自动打印Context的变量到日志中。默认为空
  header:                true                  # 是否打印日志的头信息。默认true
  stdout:                true                  # 日志是否同时输出到终端。默认true
  rotateSize:            0                     # 按照日志文件大小对文件进行滚动切分。默认为0，表示关闭滚动切分特性
  rotateExpire:          24h                     # 按天切分（24小时）
  rotateBackupLimit:     0                     # 按照切分的文件数量清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
  rotateBackupExpire:    720h                  # 按照切分的文件有效期清理切分文件，当滚动切分特性开启时有效。默认为0，表示不备份，切分则删除
  rotateBackupCompress:  0                     # 滚动切分文件的压缩比（0-9）。默认为0，表示不压缩
  rotateCheckInterval:   "1h"                  # 滚动切分的时间检测间隔，一般不需要设置。默认为1小时
  stdoutColorDisabled:   false                 # 关闭终端的颜色打印。默认开启
  writerColorEnable:     false                 # 日志文件是否带上颜色。默认false，表示不带颜色