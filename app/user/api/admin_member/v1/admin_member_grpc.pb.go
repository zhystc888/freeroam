// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: admin_member/v1/admin_member.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminMember_Get_FullMethodName     = "/admin_member.v1.AdminMember/Get"
	AdminMember_GetList_FullMethodName = "/admin_member.v1.AdminMember/GetList"
)

// AdminMemberClient is the client API for AdminMember service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminMemberClient interface {
	// 获取成员详情
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
	// 获取成员列表
	GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*GetListRes, error)
}

type adminMemberClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminMemberClient(cc grpc.ClientConnInterface) AdminMemberClient {
	return &adminMemberClient{cc}
}

func (c *adminMemberClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRes)
	err := c.cc.Invoke(ctx, AdminMember_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminMemberClient) GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*GetListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListRes)
	err := c.cc.Invoke(ctx, AdminMember_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminMemberServer is the server API for AdminMember service.
// All implementations must embed UnimplementedAdminMemberServer
// for forward compatibility.
type AdminMemberServer interface {
	// 获取成员详情
	Get(context.Context, *GetReq) (*GetRes, error)
	// 获取成员列表
	GetList(context.Context, *GetListReq) (*GetListRes, error)
	mustEmbedUnimplementedAdminMemberServer()
}

// UnimplementedAdminMemberServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminMemberServer struct{}

func (UnimplementedAdminMemberServer) Get(context.Context, *GetReq) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAdminMemberServer) GetList(context.Context, *GetListReq) (*GetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedAdminMemberServer) mustEmbedUnimplementedAdminMemberServer() {}
func (UnimplementedAdminMemberServer) testEmbeddedByValue()                     {}

// UnsafeAdminMemberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminMemberServer will
// result in compilation errors.
type UnsafeAdminMemberServer interface {
	mustEmbedUnimplementedAdminMemberServer()
}

func RegisterAdminMemberServer(s grpc.ServiceRegistrar, srv AdminMemberServer) {
	// If the following call pancis, it indicates UnimplementedAdminMemberServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminMember_ServiceDesc, srv)
}

func _AdminMember_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminMemberServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminMember_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminMemberServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminMember_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminMemberServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminMember_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminMemberServer).GetList(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminMember_ServiceDesc is the grpc.ServiceDesc for AdminMember service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminMember_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin_member.v1.AdminMember",
	HandlerType: (*AdminMemberServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AdminMember_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _AdminMember_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_member/v1/admin_member.proto",
}
